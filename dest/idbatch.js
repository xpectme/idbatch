function n(m,d,l){let c=l.length;l.push([d,void 0]),m.onsuccess=y=>{let s=y.target.result;l[c]=[d,s===void 0?!0:s]},m.onerror=()=>{l[c]=[d,!1]}}function D(m,d,l){let c=new Set(d.map(t=>t.storeName)),y=Array.from(c),s=m.transaction(y,l),o=[];for(let t of d){let a=s.objectStore(t.storeName);switch(t.method){case"add":{let{data:e,key:r}=t;if(Array.isArray(e))for(let B of e)n(a.add(B,r),"add",o);else n(a.add(e,r),"add",o);break}case"put":{let{data:e,key:r}=t;if(Array.isArray(e))for(let B of e)n(a.put(B,r),"put",o);else n(a.put(e,r),"put",o);break}case"del":{if("keys"in t)for(let e of t.keys)n(a.delete(e),"del",o);else"key"in t&&n(a.delete(t.key),"del",o);break}case"clear":{n(a.clear(),"clear",o);break}case"get":{let{query:e}=t;n(a.get(e),"get",o);break}case"getAll":{let{query:e,count:r}=t;n(a.getAll(e,r),"getAll",o);break}case"getAllKeys":{let{query:e,count:r}=t;n(a.getAllKeys(e,r),"getAllKeys",o);break}case"getKey":{let{query:e}=t;n(a.getKey(e),"getKey",o);break}case"count":{let{query:e}=t;n(a.count(e),"count",o);break}}}return{abort:()=>s.abort(),completed:new Promise((t,a)=>{s.oncomplete=()=>t(o),s.onerror=()=>a(s.error)})}}export{D as default};
//# sourceMappingURL=idbatch.js.map
